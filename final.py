# -*- coding: utf-8 -*-
import datetime

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# FAIL rgb(255, 50, 50)

# Under TESTING  rgb(0, 128, 255)

# GREEN rgb(17, 255, 0)

# IDLE rgb(255, 255, 255)


from PyQt5 import QtCore, QtGui, QtWidgets
from prompts import Prompt
import time
import PFC_control_done
import DMM_READ
from screeninfo import get_monitors
import winsound
import time
import threading
import keyboard


global width, height

for m in get_monitors():
    if m.is_primary:
        width = m.width
        height = m.height


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        global width, height
        # if m.is_primary:
        self.w = width
        self.h = height
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(self.w, self.h)
        MainWindow.setWindowIcon(QtGui.QIcon(QtGui.QPixmap(".\\images\\logo_1.png")))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.card_and_associate_details = QtWidgets.QGroupBox(self.centralwidget)
        self.card_and_associate_details.setGeometry(QtCore.QRect(int(self.w*0.0147), int(self.h*0.221), int(self.w*0.271), int(self.h*0.455)))
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.card_and_associate_details.setFont(font)
        self.card_and_associate_details.setObjectName("card_and_associate_details")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.card_and_associate_details)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(int(self.w*0.0073), int(self.h*0.039), int(self.w*0.257), int(self.h*0.3919)))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_cardserialno = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.label_cardserialno.setFont(font)
        self.label_cardserialno.setObjectName("label_cardserialno")
        self.horizontalLayout.addWidget(self.label_cardserialno)
        spacerItem = QtWidgets.QSpacerItem(int(self.w*0.029), int(self.h*0.026042), QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.lineEdit_cardserialno = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_cardserialno.setObjectName("lineEdit_cardserialno")
        self.horizontalLayout.addWidget(self.lineEdit_cardserialno)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_associatename = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.label_associatename.setFont(font)
        self.label_associatename.setObjectName("label_associatename")
        self.horizontalLayout_2.addWidget(self.label_associatename)
        spacerItem1 = QtWidgets.QSpacerItem(int(self.w*0.029), int(self.h*0.026042), QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.lineEdit_associatename = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_associatename.setObjectName("lineEdit_associatename")
        self.horizontalLayout_2.addWidget(self.lineEdit_associatename)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton_start = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.pushButton_start.setFont(font)
        self.pushButton_start.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.pushButton_start.setObjectName("pushButton_start")
        self.pushButton_start.clicked.connect(self.start_function)
        self.horizontalLayout_3.addWidget(self.pushButton_start)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_STARTTIME = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.label_STARTTIME.setFont(font)
        self.label_STARTTIME.setObjectName("label_STARTTIME")
        self.horizontalLayout_5.addWidget(self.label_STARTTIME)
        spacerItem2 = QtWidgets.QSpacerItem(int(self.w*0.029), int(self.h*0.026042), QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem2)
        self.lineEdit_STARTTIME = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_STARTTIME.setObjectName("lineEdit_STARTTIME")
        self.lineEdit_STARTTIME.setReadOnly(True)
        self.horizontalLayout_5.addWidget(self.lineEdit_STARTTIME)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.ENDTIME_NAME = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.ENDTIME_NAME.setFont(font)
        self.ENDTIME_NAME.setObjectName("ENDTIME_NAME")
        self.horizontalLayout_6.addWidget(self.ENDTIME_NAME)
        spacerItem3 = QtWidgets.QSpacerItem(int(self.w*0.029), int(self.h*0.026042), QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem3)
        self.lineEdit_ENDTIME = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_ENDTIME.setObjectName("lineEdit_ENDTIME")
        self.lineEdit_ENDTIME.setReadOnly(True)
        self.horizontalLayout_6.addWidget(self.lineEdit_ENDTIME)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.pushbutton_ptp = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        self.pushbutton_ptp.setFont(font)
        self.pushbutton_ptp.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.pushbutton_ptp.setObjectName("ptp")
        self.verticalLayout.addWidget(self.pushbutton_ptp)
        self.TESING_PARAMTEBOX = QtWidgets.QGroupBox(self.centralwidget)
        self.TESING_PARAMTEBOX.setGeometry(QtCore.QRect(int(self.w*0.2928), int(self.h*0.1953), int(self.w*0.41068), int(self.h*0.4830)))
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.TESING_PARAMTEBOX.setFont(font)
        self.TESING_PARAMTEBOX.setObjectName("TESING_PARAMTEBOX")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.TESING_PARAMTEBOX)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(int(self.w*0.0146), int(self.h*0.052), int(self.w*0.3814), int(self.h*0.431)))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem4 = QtWidgets.QSpacerItem(int(self.w*0.0146), int(self.h*0.052), QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem4)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.health_check = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.health_check.setFont(font)
        self.health_check.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.health_check.setAlignment(QtCore.Qt.AlignCenter)
        self.health_check.setObjectName("health_check")
        self.verticalLayout_3.addWidget(self.health_check)
        self.verticalLayout_2.addLayout(self.verticalLayout_3)
        spacerItem5 = QtWidgets.QSpacerItem(int(self.w*0.0146), int(self.h*0.052), QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem5)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.input = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.input.setFont(font)
        self.input.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.input.setAlignment(QtCore.Qt.AlignCenter)
        self.input.setObjectName("input")
        self.verticalLayout_5.addWidget(self.input)
        self.verticalLayout_2.addLayout(self.verticalLayout_5)
        spacerItem7 = QtWidgets.QSpacerItem(int(self.w*0.0146), int(self.h*0.052), QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem7)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.alarm = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.alarm.setFont(font)
        self.alarm.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.alarm.setAlignment(QtCore.Qt.AlignCenter)
        self.alarm.setObjectName("alarm")
        self.verticalLayout_7.addWidget(self.alarm)
        self.verticalLayout_2.addLayout(self.verticalLayout_7)
        spacerItem6 = QtWidgets.QSpacerItem(int(self.w*0.0146), int(self.h*0.052), QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem6)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.output = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.output.setFont(font)
        self.output.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.output.setAlignment(QtCore.Qt.AlignCenter)
        self.output.setObjectName("output")
        self.verticalLayout_6.addWidget(self.output)
        self.verticalLayout_2.addLayout(self.verticalLayout_6)
        spacerItem8 = QtWidgets.QSpacerItem(int(self.w*0.0146), int(self.h*0.052), QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem8)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(int(self.w*0.7174), int(self.h*0.1953), int(self.w*0.2569), int(self.h*0.4830)))
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0169))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox)
        self.textBrowser.setGeometry(QtCore.QRect(int(self.w*0.00732), int(self.h*0.065), int(self.w*0.23499), int(self.h*0.4049)))
        self.textBrowser.setObjectName("textBrowser")
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.0139))
        font.setBold(True)
        font.setWeight(int(self.h*0.026042))
        self.textBrowser.setFont(font)
        self.pushbutton_clear = QtWidgets.QPushButton(self.groupBox)
        self.pushbutton_clear.setGeometry(QtCore.QRect(int(self.w*0.175695), int(self.h*0.026042), int(self.w*0.065886), int(self.h*0.029948)))
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.01))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.pushbutton_clear.setFont(font)
        self.pushbutton_clear.setObjectName("pushbutton_clear")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(int(self.w*0.021962), int(self.h*0.026042), int(self.w*0.718155), int(self.h*0.144531)))
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.049048))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(119, 121, 255);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(int(self.w*0.1757), int(self.h*0.3385), int(self.w*0.11713), int(self.h*0.1041)))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(int(self.w*0.768668), int(self.h*0.039063), int(self.w*0.1764), int(self.h*0.13151)))
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.020833))
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.final_status = QtWidgets.QLabel(self.groupBox_2)
        self.final_status.setGeometry(QtCore.QRect(int(self.w*0.018302), int(self.h*0.039063), int(self.w*0.146413), int(self.h*0.065104)))
        font = QtGui.QFont()
        font.setPointSize(int(self.h*0.026))
        font.setBold(True)
        font.setWeight(int(self.h*0.097))
        self.final_status.setFont(font)
        self.final_status.setAlignment(QtCore.Qt.AlignCenter)
        self.final_status.setObjectName("final_status")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(int(self.w*0), int(self.h*0), int(self.w*0.983163), int(self.h*0.027344)))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        '''INDICATION'''
        self.emergency_status = QtWidgets.QFrame(MainWindow)
        self.emergency_status.setGeometry(QtCore.QRect(100, 750, 141, 141))
        self.emergency_status.setStyleSheet("QFrame{\n"
                                     "    border-color: rgb(0, 255, 0);\n"
                                     "    border-radius:70px;\n"
                                     "    background-color: rgb(188, 0, 0);border: 2px solid black\n"     #RGB(255,0,0);
                                     "}")
        self.emergency_status.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.emergency_status.setFrameShadow(QtWidgets.QFrame.Raised)
        self.emergency_status.setObjectName("emergency")
        self.setup_status_2 = QtWidgets.QFrame(MainWindow)
        self.setup_status_2.setGeometry(QtCore.QRect(280, 750, 141, 141))
        self.setup_status_2.setStyleSheet("QFrame{\n"
                                          "    border-radius:70px;\n"
                                          "    border: 2px solid black;background-color: rgb(0, 130, 0);\n"  #rgb(0, 209, 0)
                                          "}")
        self.setup_status_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.setup_status_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.setup_status_2.setObjectName("setup_status_2")
        self.emergency = QtWidgets.QLabel(MainWindow)
        self.emergency.setGeometry(QtCore.QRect(100, 900, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.emergency.setFont(font)
        self.emergency.setAlignment(QtCore.Qt.AlignCenter)
        self.emergency.setObjectName("emergency")
        self.setup = QtWidgets.QLabel(MainWindow)
        self.setup.setGeometry(QtCore.QRect(280, 900, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.setup.setFont(font)
        self.setup.setAlignment(QtCore.Qt.AlignCenter)
        self.setup.setObjectName("setup")
        '''INDICATION'''

        """
                MARKINGS
                """

        self.horizontalLayoutWidget = QtWidgets.QWidget(MainWindow)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(65, 940, 400, 81))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_2.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.pushButton_2.setText("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.active_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.active_label.setFont(font)
        self.active_label.setAlignment(QtCore.Qt.AlignCenter)
        self.active_label.setObjectName("label")
        self.verticalLayout.addWidget(self.active_label)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_3.setStyleSheet("background-color: rgb(150, 0, 0);")
        self.pushButton_3.setText("")
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_4.setStyleSheet("background-color: rgb(0, 130, 0);")
        self.pushButton_4.setText("")
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_2.addWidget(self.pushButton_4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.horizontalLayout_3.addLayout(self.verticalLayout_2)

        """MARKINGS END"""

        self.prompt = Prompt()
        self.channel = 0
        self.card_id = 0x610
        self.pfc = PFC_control_done.pfc_control(self.channel, self.card_id)
        self.contacts = PFC_control_done
        self.dmm = DMM_READ.DMM_READ()
        self.cro = DMM_READ.CRO()
        try:
            thread_1 = threading.Thread(target=self.buzzer, args=[self.pfc.read_pfc()])
            thread_1.start()
        except RuntimeError:
            thread_1 = threading.Thread(target=self.buzzer, args=[True])
            thread_1.start()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SPIN FREE TEST SCRIPT"))
        self.card_and_associate_details.setTitle(_translate("MainWindow", "CARD AND ASSOCIATE DETAILS"))
        self.label_cardserialno.setText(_translate("MainWindow", "CARD SERIAL NO."))
        self.label_associatename.setText(_translate("MainWindow", "ASSOCIATE NAME"))
        self.pushButton_start.setText(_translate("MainWindow", "START "))
        self.label_STARTTIME.setText(_translate("MainWindow", "START TIME"))
        self.ENDTIME_NAME.setText(_translate("MainWindow", "STOP TIME"))
        self.pushbutton_ptp.setText(_translate("MainWindow", "VIEW PTP"))
        self.TESING_PARAMTEBOX.setTitle(_translate("MainWindow", "TESTING PARAMETERS"))
        self.health_check.setText(_translate("MainWindow", "PHYSICAL HEALTH CHECK UP"))
        self.input.setText(_translate("MainWindow", "INPUT VOLTAGES"))
        self.output.setText(_translate("MainWindow", "OUTPUT VOLTAGES/ CURRENT"))
        self.alarm.setText(_translate("MainWindow", "ALARM TESTING"))
        self.groupBox.setTitle(_translate("MainWindow", "LOG DATA"))
        self.pushbutton_clear.setText(_translate("MainWindow", "CLEAR LOGS"))
        self.label.setText(_translate("MainWindow", "SPIN FREE ATS V1.0"))
        self.groupBox_2.setTitle(_translate("MainWindow", "STATUS"))
        self.final_status.setText(_translate("MainWindow", ""))
        self.emergency.setText(_translate("MainWindow", "EMERGENCY"))
        self.setup.setText(_translate("MainWindow", "SETUP STATUS"))
        self.active_label.setText(_translate("MainWindow", "ACTIVE STATE"))
        self.label_2.setText(_translate("MainWindow", "OFF STATE"))

    def print_console(self, text="", color="BLUE"):
        if color == "RED":
            self.textBrowser.setTextColor(QtCore.Qt.red)
        elif color == "BLUE":
            self.textBrowser.setTextColor(QtCore.Qt.blue)
        elif color == "GREEN":
            self.textBrowser.setTextColor(QtCore.Qt.darkGreen)
        self.textBrowser.append(str(text))
        QtWidgets.qApp.processEvents()
        time.sleep(0.01)

    def initial_checks(self):
        self.serial_number = self.lineEdit_cardserialno.text()
        self.associate_name = self.lineEdit_associatename.text()
        if self.associate_name != "":
            if self.serial_number != "":
                if "-" in self.serial_number and len(self.serial_number) < 30:
                    self.prompt.Message("Warning", "Kindly enter correct barcode!")
                elif "-" not in self.serial_number and len(self.serial_number) < 24:
                    self.prompt.Message("Warning", "Kindly enter correct barcode!")
                elif len(self.serial_number) < 24:
                    self.prompt.Message("Warning", "Kindly enter correct barcode!")
                else:
                    self.is_topcard = False
                    var = self.serial_number.split("#")[0]
                    if len(var) == 8:
                        self.is_topcard = False
                    elif len(var) == 14:
                        self.is_topcard = True
                    else:
                        self.prompt.Message("ERROR!", "Incorrect Barcode Kindly Check Barcode!")
                        return False
                    return True
            else:
                self.prompt.Message("Warning", "Kindly enter serial number!")
        else:
            self.prompt.Message("Warning", "Kindly enter Associate Name")
            return False

    def start_function(self):
        self.pushButton_start.setDisabled(True)
        testing_flag = True
        global final_output
        self.is_topcard = True
        if not self.initial_checks():
            self.reset()
            self.final_status.setText("TESTING...")
            font = QtGui.QFont()
            font.setPointSize(20)
            font.setBold(True)
            font.setWeight(75)
            self.final_status.setFont(font)
            self.final_status.setStyleSheet("")
            self.print_console(f'DUT PART NUMBER : {self.serial_number}')
            self.print_console(f'ASSOCIATE NAME : {self.associate_name}')
            self.lineEdit_STARTTIME.setText(str(self.get_date_time(time=1, date=1)))
            self.setup_status_2.setStyleSheet("QFrame{\n"
                                          "    border-radius:70px;\n"
                                          "    border: 2px solid black;background-color: rgb(0, 255, 0);\n"  #rgb(0, 209, 0)
                                          "}")
            while testing_flag:
                for i in range(2, 4):
                    final_output = []

                    function_status = self.run_test(i)

                    print(f"Test number {i}: {function_status}")

                    if function_status:
                        final_output.append(function_status)
                    else:
                        user_response = self.prompt.User_prompt("Do you want to skip\nthis test and continue")
                        if user_response:
                            testing_flag = True
                            final_output.append(function_status)
                        else:
                            final_output.append(function_status)
                            testing_flag = False
                            break

                    if i == 3:
                        testing_flag = False
                        print(final_output)
                        break

            console_output_flag = True
            for results in final_output:
                if not results:
                    console_output_flag = False

            if console_output_flag:
                self.final_status.setText("PASS")
                self.final_status.setStyleSheet('color:GREEN')
                self.final_status.setFont(QtGui.QFont("Calibri", 50))
            else:
                self.final_status.setText("FAIL")
                self.final_status.setStyleSheet('color:RED')
                self.final_status.setFont(QtGui.QFont("Calibri", 50))

            self.lineEdit_ENDTIME.setText(str(self.get_date_time(date=1, time=1)))
            # self.pfc.pfc_set([PFC_control_done.PFC2])
            # value = float(self.dmm.read(4, "V"))
            # self.print_console(f"Voltage is {value:.2f}")
        else:
            self.prompt.Message("ERROR!", "Kindly complete Test Details")

        self.pushButton_start.setDisabled(False)
        self.setup_status_2.setStyleSheet("QFrame{\n"
                                          "    border-radius:70px;\n"
                                          "    border: 2px solid black;background-color: rgb(0, 130, 0);\n"  # rgb(0, 209, 0)
                                          "}")
        self.emergency_status.setStyleSheet("QFrame{\n"
                                          "    border-radius:70px;\n"
                                          "    border: 2px solid black;background-color: rgb(150, 0, 0);\n"  # rgb(0, 209, 0)
                                          "}")

    def run_test(self, test_number: object) -> object:
        if test_number == 0:
            health_check_variable = self.physicalHealthCheck()
            if health_check_variable:
                self.health_check.setStyleSheet("background-color:rgb(17,255,0)")
            else:
                self.health_check.setStyleSheet("background-color:rgb(235,50,50)")
            return health_check_variable
        elif test_number == 1:
            health_check_variable = self.inputFunction()
            if health_check_variable:
                self.input.setStyleSheet("background-color:rgb(17,255,0)")
            else:
                self.input.setStyleSheet("background-color:rgb(235,50,50)")
            return health_check_variable
        elif test_number == 2:
            health_check_variable = self.alarmTesting()
            if health_check_variable:
                self.alarm.setStyleSheet("background-color:rgb(17,255,0)")
            else:
                self.alarm.setStyleSheet("background-color:rgb(235,50,50)")
            return health_check_variable
        elif test_number == 3:
            health_check_variable = self.outputFunction()
            if health_check_variable:
                self.output.setStyleSheet("background-color:rgb(17,255,0)")
            else:
                self.output.setStyleSheet("background-color:rgb(235,50,50)")
            return health_check_variable
        else:
            return False

    def physicalHealthCheck(self):
        result = []
        self.health_check.setStyleSheet("background-color:rgb(0,128,255)")
        if self.is_topcard:
            user_response = self.prompt.User_prompt(
                "Are all connectors connected to Testing unit at respective connections?")
            if user_response:
                temp = True
                self.pfc.pfc_set([PFC_control_done.PFC9])
            else:
                temp = False
            result.append(temp)
        else:
            pass

        return CALCULATE_RESULT(result)


    def inputFunction(self):
        result = []
        self.input.setStyleSheet("background-color:rgb(0,128,255)")
        if self.is_topcard:
            self.pfc.pfc_set([PFC_control_done.PFC9])
            time.sleep(1)
            value = float(self.dmm.read(1, "VAC"))
            if 220 < value < 240:
                self.print_console(f"Input AC Voltage is : {value:.2f} V")
                temp = True
            else:
                self.print_console(f"Input AC Voltage is : {value:.2f} V")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)

            self.pfc.pfc_set([PFC_control_done.PFC2, PFC_control_done.PFC9])
            time.sleep(1)
            value = float(self.dmm.read(4, "V"))
            if 14.25 < value < 15.75:
                self.print_console(f"+15V Voltage is : {value:.2f} V")
                temp = True
            else:
                self.print_console(f"+15V Voltage is : {value:.2f} V")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)

            self.pfc.pfc_set([PFC_control_done.PFC6, PFC_control_done.PFC9])
            time.sleep(1)
            value = float(self.dmm.read(4, "V"))
            if 4.25 < value < 5.5:
                self.print_console(f"+5V Voltage is : {value:.2f} V")
                temp = True
            else:
                self.print_console(f"+5V Voltage is : {value:.2f} V")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)

            self.pfc.pfc_set([PFC_control_done.PFC4, PFC_control_done.PFC9])
            time.sleep(1)
            value = float(self.dmm.read(4, "V"))
            if 3.13 < value < 3.5:
                self.print_console(f"+3V3V Voltage is : {value:.2f} V")
                temp = True
            else:
                self.print_console(f"+3V3V Voltage is : {value:.2f} V")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)

            self.pfc.pfc_set([PFC_control_done.PFC8, PFC_control_done.PFC9])
            time.sleep(1)
            value = float(self.dmm.read(4, "V"))
            if 1.15 < value < 1.32:
                self.print_console(f"+1.25V Voltage is : {value:.2f} V")
                temp = True
            else:
                self.print_console(f"+1.25V Voltage is : {value:.2f} V")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)


            self.pfc.pfc_set([PFC_control_done.PFC1, PFC_control_done.PFC9])
            time.sleep(3)
            value = float(self.dmm.read(4, "V"))
            # value = float(self.cro.read_command(":MEASure:AMPlitude?"))
            if 1.1 < value < 1.32:
                self.print_console(f"V-PN and GND Voltage is : {value:.2f} V")
                temp = True
            else:
                self.print_console(f"V-PN and GND Voltage is : {value:.2f} V")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)


            # self.pfc.pfc_set([PFC_control_done.PFC1, PFC_control_done.PFC9])
            time.sleep(1)
            value = float(self.cro.read_command(":MEASure:RMS?"))*1000
            if 420 < value < 480:
                self.print_console(f"V-PN and GND AC Voltage is : {value:.2f} mV")
                temp = True
            else:
                self.print_console(f"V-PN and GND AC Voltage is : {value:.2f} mV")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)

            self.pfc.pfc_set([PFC_control_done.PFC3, PFC_control_done.PFC9])
            time.sleep(3)
            value = float(self.dmm.read(4, "V"))
            # value = float(self.cro.read_command(":MEASure:AMPlitude?"))
            if 1.1 < value < 1.32:
                self.print_console(f"V-NE and GND Voltage is : {value:.2f} V")
                temp = True
            else:
                self.print_console(f"V-NE and GND Voltage is : {value:.2f} V")
                self.print_console("Voltage value is out of range", "RED")
                temp = False
            result.append(temp)

            # time.sleep(1)
            # value = float(self.cro.read_command(":MEASure:RMS?"))*1000
            # print(f"{value} of VNE voltage")
            # if 1 < value < 14:
            #     self.print_console(f"V-NE and GND AC Voltage is : {value:.2f} V")
            #     temp = True
            # else:
            #     self.print_console(f"V-NE and GND AC Voltage is : {value:.2f} V")
            #     self.print_console("Voltage value is out of range", "RED")
            #     temp = False
            # result.append(temp)

        else:
            pass
        
        self.pfc.pfc_stop()

        return CALCULATE_RESULT(result)


    def outputFunction(self):
        result = []
        self.output.setStyleSheet("background-color:rgb(0,128,255)")
        if self.is_topcard:
            try:
                user_response = self.prompt.User_prompt(
                    "Are all connectors connected to Testing unit at respective connections?")
                if user_response:
                    temp = True
                    self.state = False
                else:
                    temp = False
                result.append(temp)
            except Exception as exp:
                print(exp)
        else:
            pass

        return CALCULATE_RESULT(result)

    def alarmTesting(self):
        result = []
        self.alarm.setStyleSheet("background-color:rgb(0,128,255)")
        if self.is_topcard:
            user_response = self.prompt.User_prompt(
                "Are all connectors connected to Testing unit at respective connections?")
            if user_response:
                temp = True
            else:
                temp = False
            result.append(temp)
        else:
            pass

        return CALCULATE_RESULT(result)

    def reset(self):
        self.health_check.setStyleSheet("background-color:rgb(255,255,255)")
        self.input.setStyleSheet("background-color:rgb(255,255,255)")
        self.output.setStyleSheet("background-color:rgb(255,255,255)")
        self.alarm.setStyleSheet("background-color:rgb(255,255,255)")
        self.textBrowser.clear()
        self.lineEdit_ENDTIME.clear()
        self.final_status.setText("")
        self.setup_status_2.setStyleSheet("QFrame{\n"
                                          "    border-radius:70px;\n"
                                          "    border: 2px solid black;background-color: rgb(0, 130, 0);\n"  # rgb(0, 209, 0)
                                          "}")
        self.emergency_status.setStyleSheet("QFrame{\n"
                                          "    border-radius:70px;\n"
                                          "    border: 2px solid black;background-color: rgb(150, 0, 0);\n"  # rgb(0, 209, 0)
                                          "}")


    def buzzer(self, state):
        self.state = state
        for i in range(1, 100):
            keyboard.press_and_release("volume_up")
        while True:
            self.state = self.pfc.read_pfc()
            print(self.state)
            if self.state == 1:
                self.setup_status_2.setStyleSheet("QFrame{\n"
                                                  "    border-radius:70px;\n"
                                                  "    border: 2px solid black;background-color: rgb(0, 130, 0);\n"  # rgb(0, 209, 0)
                                                  "}")
            elif self.state == 2:
                self.emergency_status.setStyleSheet("QFrame{\n"
                                                  "    border-radius:70px;\n"
                                                  "    border: 2px solid black;background-color: rgb(150, 0, 0);\n"  # rgb(0, 209, 0)
                                                  "}")
            while self.state == 1:
                self.emergency_status.setStyleSheet("QFrame{\n"
                                              "    border-radius:70px;\n"
                                              "    border: 2px solid black;background-color: rgb(255, 0, 0);\n"  # rgb(0, 209, 0)
                                              "}")
                keyboard.press_and_release("volume_up")
                winsound.Beep(3000, 1000)
                self.emergency_status.setStyleSheet("QFrame{\n"
                                              "    border-radius:70px;\n"
                                              "    border: 2px solid black;background-color: rgb(150, 0, 0);\n"  # rgb(0, 209, 0)
                                              "}")
                time.sleep(1)
                self.state = self.pfc.read_pfc()

            while self.state == 2:
                self.setup_status_2.setStyleSheet("QFrame{\n"
                                              "    border-radius:70px;\n"
                                              "    border: 2px solid black;background-color: rgb(0, 255, 0);\n"  # rgb(0, 209, 0)
                                              "}")
                self.state = self.pfc.read_pfc()



    def get_date_time(self, date=0, time=0):
        now = datetime.datetime.now()
        year = str(now.year)
        month = str(now.month)
        day = str(now.day)
        if len(month) == 1:
            month = '0' + month
        if len(day) == 1:
            day = "0" + day
        date_only = day + "-" + month + "-" + year
        hour = str(now.hour)
        if len(hour) == 1:
            hour = "0" + hour
        minute = str(now.minute)
        if len(minute) == 1:
            minute = "0" + minute
        second = str(now.second)
        if len(second) == 1:
            second = "0" + second
        time_only = hour + ":" + minute + ":" + second
        if time == 1 and date == 1:
            return date_only + " " + time_only
        elif date == 1:
            return date_only
        elif time == 1:
            return time_only


def CALCULATE_RESULT(RESULT):
    for RESULT_TEMP in RESULT:
        if RESULT_TEMP == False:
            return False
    return True


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.showMaximized()
    sys.exit(app.exec_())
